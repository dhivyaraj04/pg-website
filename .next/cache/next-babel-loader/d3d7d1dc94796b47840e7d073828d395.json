{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Subtext, CardBlock, SpaceTag, FlexTag, ImageTag, OrderTag, ListTag, LoadMorebutton, InputTag, HorizontalLine, ChatFooter } from \"../../components/small-component\";\nimport * as Logo from \"../../img/logo.png\";\nimport { BaseUrl } from \"../../url\";\nexport function Chat(_ref) {\n  var expertisItems = _ref.expertisItems;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState({}),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      buttonName = _React$useState4[0],\n      setButtonName = _React$useState4[1];\n\n  var bottomRef = useRef(null);\n\n  var _useState = useState(\"\"),\n      values = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState(false),\n      typeBox = _useState2[0],\n      setTypeBox = _useState2[1];\n\n  var _useState3 = useState([]),\n      messages = _useState3[0],\n      setMessages = _useState3[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      expertise = _React$useState6[0],\n      setExpertise = _React$useState6[1];\n\n  var _React$useState7 = React.useState([]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      subExpertise = _React$useState8[0],\n      setSubExpertise = _React$useState8[1];\n\n  var _React$useState9 = React.useState(\"\"),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      expertiseId = _React$useState10[0],\n      setExpertiseId = _React$useState10[1];\n\n  var _React$useState11 = React.useState(\"\"),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      subExpertiseId = _React$useState12[0],\n      setSubExpertiseId = _React$useState12[1];\n\n  var _React$useState13 = React.useState(\"\"),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      queryContent = _React$useState14[0],\n      setQueryContent = _React$useState14[1];\n\n  var _React$useState15 = React.useState(\"\"),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      phone = _React$useState16[0],\n      setPhone = _React$useState16[1];\n\n  var _React$useState17 = React.useState(\"\"),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      id = _React$useState18[0],\n      setId = _React$useState18[1];\n\n  var _React$useState19 = React.useState(\"\"),\n      _React$useState20 = _slicedToArray(_React$useState19, 2),\n      queryTitle = _React$useState20[0],\n      setQueryTitle = _React$useState20[1];\n\n  var _React$useState21 = React.useState({\n    height: \"40px\"\n  }),\n      _React$useState22 = _slicedToArray(_React$useState21, 2),\n      height = _React$useState22[0],\n      setHeight = _React$useState22[1];\n\n  function onClickEvent() {\n    setOpen(!open);\n  }\n\n  var scrollToBottom = function scrollToBottom() {\n    var scroll = bottomRef.current.scrollHeight - bottomRef.current.clientHeight;\n    console.log(scroll, \"scroll\");\n    console.log(bottomRef.current.scrollHeight, \"bottomRef.current.scrollHeight\");\n    console.log(bottomRef.current.clientHeight, \"bottomRef.current.clientHeight\");\n    bottomRef.current.scrollToBottom(0, scroll);\n  };\n\n  React.useEffect(function () {}, [messages]);\n\n  function nextQuestion(name, id, e) {\n    setButtonName(_objectSpread(_objectSpread({}, buttonName), {}, _defineProperty({}, name, e.target.name)));\n    scrollToBottom();\n    getSubExpertItem(id);\n    var dev = subExpertise.filter(function (eve) {\n      return onSelectDevice(eve, name);\n    });\n    setSubExpertiseId(dev[0]._id);\n    dev.length === 0 ? \"\" : getQuery();\n  }\n\n  useEffect(function () {\n    getExpertis();\n  }, []);\n\n  function getExpertis() {\n    return _getExpertis.apply(this, arguments);\n  }\n\n  function _getExpertis() {\n    _getExpertis = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res, data, content;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"\".concat(BaseUrl, \"/apiV2/expertises\"), {\n                method: \"GET\"\n              });\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.json();\n\n            case 5:\n              data = _context.sent;\n              content = {\n                text: \"Select your area of expertise\",\n                button: data.expertises\n              };\n              setExpertise(data.expertises);\n              setMessages(messages.concat(content));\n              scrollToBottom();\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getExpertis.apply(this, arguments);\n  }\n\n  function getSubExpertItem(_x) {\n    return _getSubExpertItem.apply(this, arguments);\n  }\n\n  function _getSubExpertItem() {\n    _getSubExpertItem = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(expertiseId) {\n      var d, res, data, content;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setId(\"data\");\n              d = expertise.filter(function (eve) {\n                return onSelectDevices(eve, expertiseId);\n              });\n              d.length === 0 ? \"\" : setExpertiseId(expertiseId);\n              _context2.next = 5;\n              return fetch(\"\".concat(BaseUrl, \"/apiV2/expertise_subexpertise/\").concat(expertiseId), {\n                method: \"GET\"\n              });\n\n            case 5:\n              res = _context2.sent;\n              _context2.next = 8;\n              return res.json();\n\n            case 8:\n              data = _context2.sent;\n              content = [{\n                text: \"Select your area of Sub expertise\",\n                button: data.subExpertise\n              }];\n              setSubExpertise(data.subExpertise);\n              setMessages(messages.concat(content));\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _getSubExpertItem.apply(this, arguments);\n  }\n\n  function getQuery() {\n    return _getQuery.apply(this, arguments);\n  }\n\n  function _getQuery() {\n    _getQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var content;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              setTypeBox(true);\n              content = [{\n                text: \"Please provide your Query Title ?\"\n              }];\n              setMessages(messages.concat(content));\n              scrollToBottom();\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _getQuery.apply(this, arguments);\n  }\n\n  var onSelectDevice = function onSelectDevice(deviceObj, sDevice) {\n    return deviceObj.name === sDevice;\n  };\n\n  var onSelectDevices = function onSelectDevices(deviceObj, sDevice) {\n    return deviceObj._id === sDevice;\n  };\n\n  function onChangeEvent(e) {\n    var _ref2 = e.target,\n        value = _ref2.value;\n    setValue(value);\n  }\n\n  function onSubmitEvent(event) {\n    event.preventDefault();\n    setValue(\"\");\n  }\n\n  function sendmsg() {\n    var value = values;\n    var green = messages[messages.length - 1];\n    green.text === \"Please provide your Query Title ?\" ? getNextQuery(value) : \"\";\n    green.text === \"Please can you elaborate your Query ?\" ? getNextElaborateQuery(value) : \"\";\n    green.text === \"Please provide your Mobile Number, so that we can forward you playstore link\" ? getPhone(value) : \"\";\n    scrollToBottom();\n  }\n\n  function handleKeyDown(e) {\n    var _ref3 = e.target,\n        value = _ref3.value;\n\n    if (e.key === \"Enter\") {\n      var green = messages[messages.length - 1];\n      green.text === \"Please provide your Query Title ?\" ? getNextQuery(value) : \"\";\n      green.text === \"Please can you elaborate your Query ?\" ? getNextElaborateQuery(value) : \"\";\n      green.text === \"Please provide your Mobile Number, so that we can forward you playstore link\" ? getPhone(value) : \"\";\n    }\n  }\n\n  function getNextQuery(value) {\n    setHeight({\n      height: \"60px\"\n    });\n    setQueryTitle(value);\n    var content = [{\n      text1: value\n    }, {\n      text: \"Please can you elaborate your Query ?\"\n    }];\n    setMessages(messages.concat(content));\n    scrollToBottom();\n  }\n\n  function getNextElaborateQuery(value) {\n    setHeight({\n      height: \"120px\"\n    });\n    setQueryContent(value);\n    var content = [{\n      text1: value\n    }, {\n      text: \"Your query has been posted to our experts, you can find your query answer in your Protalk app\"\n    }, {\n      text: \"Please provide your Mobile Number, so that we can forward you playstore link\"\n    }];\n    setMessages(messages.concat(content));\n    scrollToBottom();\n  }\n\n  function getPhone(value) {\n    setHeight({\n      height: \"40px\"\n    });\n    setPhone(value);\n    var content = [{\n      text1: value\n    }, {\n      text: \"Thank you for you interest, We provide you 10% Discount coupon (“FIRSTPRO” Code) for your first service in protalk app\"\n    }];\n    setMessages(messages.concat(content));\n    postApi(value);\n    setTypeBox(false);\n    scrollToBottom();\n  }\n\n  function postApi(value) {\n    var phon = value;\n    fetch(\"\".concat(BaseUrl, \"/apiV2/website_bot/create_request\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        expertiseId: expertiseId,\n        subExpertiseId: subExpertiseId,\n        queryTitle: queryTitle,\n        queryContent: queryContent,\n        phoneNumber: phon\n      })\n    }).then(function (response) {\n      return response.json();\n    });\n  }\n\n  return __jsx(React.Fragment, null, __jsx(OrderTag, null, __jsx(\"div\", {\n    ref: bottomRef,\n    style: {\n      height: \"260px\",\n      overflow: \"auto\",\n      display: \"block\"\n    }\n  }, messages.map(function (item, i) {\n    return __jsx(\"div\", {\n      key: i\n    }, item.text ? __jsx(ListTag, null, __jsx(FlexTag, null, __jsx(SpaceTag, {\n      marginTop: \"10\",\n      marginBottom: \"10\"\n    }, __jsx(ImageTag, {\n      src: Logo,\n      height: \"25\",\n      width: \"25\",\n      borderRadius: \"50%\"\n    })), __jsx(\"div\", null, __jsx(CardBlock, {\n      border: \"0.8px solid rgba(204, 206, 210, 0.5)\",\n      borderRadius: \" 6px\",\n      padding: \"10px\"\n    }, __jsx(Subtext, {\n      color: \"#000\",\n      fontSize: \"12px\",\n      fontWeight: \"400\",\n      lineHeight: \"15px\"\n    }, item.text)), item.button ? __jsx(\"div\", null, item.button.map(function (item, i) {\n      return __jsx(LoadMorebutton, {\n        fontSize: \"12px\",\n        padding: \"10px\",\n        border: \"0.4px solid #029532\",\n        background: \"\".concat(buttonName[item.name] === item.name ? \"#029532\" : \"none\"),\n        color: \"\".concat(buttonName[item.name] === item.name ? \"#fff\" : \"#029532\"),\n        onClick: function onClick(e) {\n          return nextQuestion(item.name, item._id, e);\n        },\n        style: {\n          margin: \"5px\"\n        },\n        name: item.name,\n        id: item._id\n      }, item.name);\n    })) : __jsx(React.Fragment, null)))) : \"\", item.text1 ? __jsx(ListTag, null, __jsx(FlexTag, {\n      justifyContent: \"flex-end\"\n    }, __jsx(CardBlock, {\n      border: \"0.8px solid rgba(204, 206, 210, 0.5)\",\n      borderRadius: \" 6px\",\n      padding: \"10px\"\n    }, __jsx(Subtext, {\n      color: \"#000\",\n      fontSize: \"12px\",\n      fontWeight: \"400\",\n      lineHeight: \"15px\"\n    }, item.text1)))) : __jsx(React.Fragment, null));\n  }))), __jsx(ChatFooter, null, typeBox === false ? __jsx(React.Fragment, null) : __jsx(\"div\", null, __jsx(HorizontalLine, {\n    borderTop: \"1px solid #E3E3E3\"\n  }), __jsx(\"form\", {\n    onSubmit: onSubmitEvent\n  }, __jsx(FlexTag, null, __jsx(InputTag, {\n    value: values,\n    placeholder: \"Type your reply here\",\n    onChange: onChangeEvent // onKeyDown={handleKeyDown}\n\n  }), __jsx(\"button\", {\n    onClick: sendmsg\n  }, \"send\"))))));\n}","map":null,"metadata":{},"sourceType":"module"}