{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { ChatButton } from \"../../components/button/button\";\nimport { Subtext, CardBlock, SpaceTag, FlexTag, ImageTag, OrderTag, ListTag, LoadMorebutton, ChatContainer, ChatBot, ChatContent, ChatHeader } from \"../../components/small-component\";\nimport { Icon } from \"../../components/icon/icon\";\nimport { Icons } from \"../../components/icon/icons-props\";\nimport * as Logo from \"../../img/logo.png\";\n\nconst generateMessage = () => {\n  const words = [\"The sky\", \"above\", \"the port\", \"was\", \"the color of television\", \"tuned\", \"to\", \"a dead channel\", \".\", \"All\", \"this happened\", \"more or less\", \".\", \"I\", \"had\", \"the story\", \"bit by bit\", \"from various people\", \"and\", \"as generally\", \"happens\", \"in such cases\", \"each time\", \"it\", \"was\", \"a different story\", \".\", \"It\", \"was\", \"a pleasure\", \"to\", \"burn\"];\n  const text = [];\n  let x = 7;\n\n  while (--x) text.push(words[Math.floor(Math.random() * words.length)]); // return text.join(\" \");\n\n\n  return words;\n};\n\nexport function Chat() {\n  const [open, setOpen] = React.useState(false);\n  const [buttonName, setButtonName] = React.useState({});\n\n  function onClickEvent() {\n    setOpen(!open);\n  }\n\n  const chatData = [{\n    text: \"Hi there, what are you looking for today?\",\n    buttonData: [{\n      name: \"Take a Service\"\n    }, {\n      name: \"Ask a Quary\"\n    }, {\n      name: \"Looking for a Plan\"\n    }]\n  }, {\n    text: \"Select your area of expertise\",\n    buttonData: [{\n      name: \"Fitness\"\n    }, {\n      name: \"Lawyer\"\n    }, {\n      name: \"Ayurveda\"\n    }, {\n      name: \"Mental Wellness\"\n    }, {\n      name: \"Carrer Counselor\"\n    }]\n  }, {\n    text: \"Select your area of Sub expertise\",\n    buttonData: [{\n      name: \"Yoga\"\n    }, {\n      name: \"Nutrition\"\n    }, {\n      name: \"Weight Loss\"\n    }, {\n      name: \"General Exercise\"\n    }, {\n      name: \"Dietition\"\n    }]\n  }]; // const messagesEndRef = React.useRef(null);\n  // function scrollToBottom() {\n  // \tmessagesEndRef.current.scrollIntoView({\n  // \t\tbehavior: \"smooth\",\n  // \t\tblock: \"end\",\n  // \t\tinline: \"nearest\"\n  // \t});\n  // }\n\n  function nextQuestion(name, e) {\n    setButtonName(_objectSpread(_objectSpread({}, buttonName), {}, {\n      [name]: e.target.name\n    }));\n  }\n\n  const messageEl = useRef(null);\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n  useEffect(() => {\n    if (messageEl) {\n      messageEl.current.addEventListener(\"DOMNodeInserted\", event => {\n        const {\n          currentTarget: target\n        } = event;\n        target.scroll({\n          top: target.scrollHeight,\n          behavior: \"smooth\"\n        });\n      });\n    }\n  }, []);\n  useEffect(() => {\n    const generateDummyMessage = () => {\n      setInterval(() => {\n        setMessages(prevMsg => [...prevMsg, generateMessage()]);\n      }, 2000);\n    };\n\n    generateDummyMessage();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(ChatContainer, null, __jsx(ChatButton, {\n    onClickEvent: onClickEvent\n  }, __jsx(Icon, {\n    name: Icons.chat\n  }))), open === true ? __jsx(ChatBot, null, __jsx(ChatHeader, null, __jsx(SpaceTag, {\n    marginTop: \"10\",\n    marginBottom: \"10\"\n  }, __jsx(Subtext, {\n    color: \"#fff\",\n    fontSize: \"20px\",\n    letterSpacing: \"0.56px\",\n    fontWeight: \"600\"\n  }, \"Welcome to Protalk\")), __jsx(SpaceTag, {\n    marginTop: \"10\",\n    marginBottom: \"10\"\n  }, __jsx(Subtext, {\n    color: \"#fff\",\n    fontSize: \"14px\",\n    letterSpacing: \"0.56px\",\n    fontWeight: \"400\"\n  }, \"Budget Friendly Multi consultant application\"))), __jsx(ChatContent, null, __jsx(OrderTag, null, chatData.map((item, i) => __jsx(React.Fragment, null, __jsx(ListTag, null, __jsx(FlexTag, null, __jsx(SpaceTag, {\n    marginTop: \"10\",\n    marginBottom: \"10\"\n  }, __jsx(ImageTag, {\n    src: Logo,\n    height: \"25\",\n    width: \"25\",\n    borderRadius: \"50%\"\n  })), __jsx(\"div\", null, __jsx(CardBlock, {\n    border: \"0.8px solid rgba(204, 206, 210, 0.5)\",\n    borderRadius: \" 6px\",\n    padding: \"10px\"\n  }, __jsx(Subtext, {\n    color: \"#000\",\n    fontSize: \"12px\",\n    fontWeight: \"400\",\n    lineHeight: \"15px\"\n  }, item.text)), __jsx(\"div\", null, item.buttonData.map((item, i) => __jsx(LoadMorebutton, {\n    fontSize: \"12px\",\n    padding: \"10px\",\n    border: \"0.4px solid #029532\",\n    background: `${buttonName[item.name] === item.name ? \"#029532\" : \"none\"}`,\n    color: `${buttonName[item.name] === item.name ? \"#fff\" : \"#029532\"}`,\n    onClick: e => nextQuestion(item.name, e),\n    style: {\n      margin: \"10px\"\n    },\n    name: item.name\n  }, item.name)))))))), __jsx(\"div\", {\n    className: \"messages\",\n    ref: messageEl\n  }, messages.map((m, i) => __jsx(\"div\", {\n    key: i\n  }, m)))))) : __jsx(React.Fragment, null));\n}","map":null,"metadata":{},"sourceType":"module"}