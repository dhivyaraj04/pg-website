{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport { VariableSizeList as List } from \"react-window\";\nimport { SpaceTag } from \"../../components/small-component\";\nimport { Dat, Year, Month, Minutes, Hour } from \"../../components/date-time\";\nexport function Question({\n  QuestionItems\n}) {\n  const [open, setOpen] = React.useState({\n    id: \"\"\n  });\n  const [heights, setHeight] = React.useState(0);\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n  const [array, setArray] = React.useState([]);\n\n  function getForumQuery(queryId) {\n    setOpen({\n      id: queryId\n    }); // setHeight(parseInt(e.target.id));\n    // getItemSize(e.target.id);\n    // console.log(e.target.parentNode.id);\n    // document.getElementById(e.target.parentNode.id).style.height = \"auto\";\n\n    setIsOpen(true);\n    let bigCities = QuestionItems.filter(city => city._id === queryId);\n    setArray(bigCities);\n    alert(\"hi\");\n  }\n\n  function getDate(timestamp) {\n    const DateMonthYear = Dat(timestamp) + \" \" + Month(timestamp) + \" \" + Year(timestamp);\n    return DateMonthYear;\n  }\n\n  function getHoursMinutes(timestamp) {\n    const suffix = Hour(timestamp) >= 12 ? \"PM\" : \"AM\";\n    const HoursMinutes = Hour(timestamp) + \":\" + Minutes(timestamp) + \" \" + suffix;\n    return HoursMinutes;\n  }\n\n  function getArrayCount(array) {\n    const length = array.length;\n    return length + \" \" + \"Answers\";\n  }\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  function afterOpenModal() {// references are now sync'd and can be accessed.\n    // subtitle.style.color = \"#f00\";\n  }\n\n  const customStyles = {\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      bottom: \"auto\",\n      marginRight: \"-50%\",\n      transform: \"translate(-50%, -50%)\"\n    }\n  };\n\n  const Rows = ({\n    index,\n    isScrolling,\n    style\n  }) => __jsx(\"div\", {\n    style: style\n  }, isScrolling ? __jsx(\"div\", null, \"Loading ...\") : __jsx(React.Fragment, null, QuestionItems[index].expertise));\n\n  return __jsx(React.Fragment, null, __jsx(SpaceTag, {\n    marginTop: \"20\",\n    marginBottom: \"50\"\n  }, __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100vh\"\n    }\n  }, __jsx(AutoSizer, null, ({\n    height,\n    width\n  }) => __jsx(List, {\n    height: height,\n    itemCount: QuestionItems.length,\n    itemSize: 200,\n    width: width,\n    useIsScrolling: true\n  }, Rows)))));\n}","map":null,"metadata":{},"sourceType":"module"}