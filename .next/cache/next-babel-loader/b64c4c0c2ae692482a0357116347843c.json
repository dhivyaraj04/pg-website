{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { ChatButton } from \"../../components/button/button\";\nimport { Subtext, CardBlock, SpaceTag, FlexTag, ImageTag, OrderTag, ListTag, LoadMorebutton, ChatContainer, ChatBot, ChatContent, ChatHeader, InputTag, HorizontalLine, ChatFooter } from \"../../components/small-component\";\nimport { Icon } from \"../../components/icon/icon\";\nimport { Icons } from \"../../components/icon/icons-props\";\nimport * as Logo from \"../../img/logo.png\";\nimport { BaseUrl } from \"../../url\";\nexport function Chat({\n  expertisItems\n}) {\n  const [open, setOpen] = React.useState(false);\n  const [buttonName, setButtonName] = React.useState({});\n  const bottomRef = useRef(null);\n  const {\n    0: values,\n    1: setValue\n  } = useState(\"\");\n  const {\n    0: typeBox,\n    1: setTypeBox\n  } = useState(false);\n  const {\n    0: messages,\n    1: setMessages\n  } = useState([]);\n  const [expertise, setExpertise] = React.useState([]);\n  const [subExpertise, setSubExpertise] = React.useState([]);\n  const [expertiseId, setExpertiseId] = React.useState(\"\");\n  const [subExpertiseId, setSubExpertiseId] = React.useState(\"\");\n  const [queryContent, setQueryContent] = React.useState(\"\");\n  const [phone, setPhone] = React.useState(\"\");\n  const [id, setId] = React.useState(\"\");\n  const [queryTitle, setQueryTitle] = React.useState(\"\");\n  const [height, setHeight] = React.useState({\n    height: \"40px\"\n  });\n\n  function onClickEvent() {\n    setOpen(!open);\n  }\n\n  function useOutsideAlerter(ref) {\n    useEffect(() => {\n      /**\n       * Alert if clicked on outside of element\n       */\n      function handleClickOutside(event) {\n        if (ref.current && !ref.current.contains(event.target)) {\n          alert(\"You clicked outside of me!\");\n          setOpen(true);\n        }\n      } // Bind the event listener\n\n\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => {\n        // Unbind the event listener on clean up\n        document.removeEventListener(\"mousedown\", handleClickOutside);\n      };\n    }, [ref]);\n  }\n\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef);\n  useEffect(() => {}, []);\n\n  const scrollToBottom = () => {\n    if (bottomRef) {\n      bottomRef.current.addEventListener(\"DOMNodeInserted\", event => {\n        const {\n          currentTarget: target\n        } = event;\n        target.scroll({\n          top: target.scrollHeight,\n          behavior: \"smooth\"\n        });\n      });\n    }\n  };\n\n  React.useEffect(() => {}, [messages]);\n\n  function nextQuestion(name, id, e) {\n    setButtonName(_objectSpread(_objectSpread({}, buttonName), {}, {\n      [name]: e.target.name\n    }));\n    scrollToBottom();\n    getSubExpertItem(id);\n    const dev = subExpertise.filter(eve => onSelectDevice(eve, name));\n    setSubExpertiseId(dev[0]._id);\n    dev.length === 0 ? \"\" : getQuery();\n  }\n\n  useEffect(() => {\n    getExpertis();\n  }, []);\n\n  async function getExpertis() {\n    const res = await fetch(`${BaseUrl}/apiV2/expertises`, {\n      method: \"GET\"\n    });\n    const data = await res.json();\n    const content = {\n      text: \"Select your area of expertise\",\n      button: data.expertises\n    };\n    setExpertise(data.expertises);\n    setMessages(messages.concat(content));\n    scrollToBottom();\n  }\n\n  async function getSubExpertItem(expertiseId) {\n    setId(\"data\");\n    const d = expertise.filter(eve => onSelectDevices(eve, expertiseId));\n    d.length === 0 ? \"\" : setExpertiseId(expertiseId);\n    const res = await fetch(`${BaseUrl}/apiV2/expertise_subexpertise/${expertiseId}`, {\n      method: \"GET\"\n    });\n    const data = await res.json();\n    const content = [{\n      text: \"Select your area of Sub expertise\",\n      button: data.subExpertise\n    }];\n    setSubExpertise(data.subExpertise);\n    setMessages(messages.concat(content));\n  }\n\n  async function getQuery() {\n    setTypeBox(true);\n    const content = [{\n      text: \"Please provide your Query Title ?\"\n    }];\n    setMessages(messages.concat(content));\n    scrollToBottom();\n  }\n\n  const onSelectDevice = (deviceObj, sDevice) => {\n    return deviceObj.name === sDevice;\n  };\n\n  const onSelectDevices = (deviceObj, sDevice) => {\n    return deviceObj._id === sDevice;\n  };\n\n  function onChangeEvent(e) {\n    const {\n      value\n    } = e.target;\n    setValue(value);\n  }\n\n  function onSubmitEvent(event) {\n    event.preventDefault();\n    setValue(\"\");\n  }\n\n  function sendmsg() {\n    const value = values;\n    var green = messages[messages.length - 1];\n    green.text === \"Please provide your Query Title ?\" ? getNextQuery(value) : \"\";\n    green.text === \"Please can you elaborate your Query ?\" ? getNextElaborateQuery(value) : \"\";\n    green.text === \"Please provide your Mobile Number, so that we can forward you playstore link\" ? getPhone(value) : \"\";\n    scrollToBottom();\n  }\n\n  function handleKeyDown(e) {\n    const {\n      value\n    } = e.target;\n\n    if (e.key === \"Enter\") {\n      var green = messages[messages.length - 1];\n      green.text === \"Please provide your Query Title ?\" ? getNextQuery(value) : \"\";\n      green.text === \"Please can you elaborate your Query ?\" ? getNextElaborateQuery(value) : \"\";\n      green.text === \"Please provide your Mobile Number, so that we can forward you playstore link\" ? getPhone(value) : \"\";\n    }\n  }\n\n  function getNextQuery(value) {\n    setHeight({\n      height: \"60px\"\n    });\n    setQueryTitle(value);\n    const content = [{\n      text1: value\n    }, {\n      text: \"Please can you elaborate your Query ?\"\n    }];\n    setMessages(messages.concat(content));\n    scrollToBottom();\n  }\n\n  function getNextElaborateQuery(value) {\n    setHeight({\n      height: \"120px\"\n    });\n    setQueryContent(value);\n    const content = [{\n      text1: value\n    }, {\n      text: \"Your query has been posted to our experts, you can find your query answer in your Protalk app\"\n    }, {\n      text: \"Please provide your Mobile Number, so that we can forward you playstore link\"\n    }];\n    setMessages(messages.concat(content));\n    scrollToBottom();\n  }\n\n  function getPhone(value) {\n    setHeight({\n      height: \"40px\"\n    });\n    setPhone(value);\n    const content = [{\n      text1: value\n    }, {\n      text: \"Thank you for you interest, We provide you 10% Discount coupon (“FIRSTPRO” Code) for your first service in protalk app\"\n    }];\n    setMessages(messages.concat(content));\n    postApi(value);\n    setTypeBox(false);\n    scrollToBottom();\n  }\n\n  function postApi(value) {\n    const phon = value;\n    fetch(`${BaseUrl}/apiV2/website_bot/create_request`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        expertiseId: expertiseId,\n        subExpertiseId: subExpertiseId,\n        queryTitle: queryTitle,\n        queryContent: queryContent,\n        phoneNumber: phon\n      })\n    }).then(response => {\n      return response.json();\n    });\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    ref: wrapperRef\n  }, __jsx(ChatContainer, null, __jsx(ChatButton, {\n    onClickEvent: onClickEvent\n  }, __jsx(Icon, {\n    name: Icons.chat\n  })))), open === true ? __jsx(ChatBot, null, __jsx(ChatHeader, null, __jsx(SpaceTag, {\n    marginTop: \"10\",\n    marginBottom: \"10\"\n  }, __jsx(Subtext, {\n    color: \"#fff\",\n    fontSize: \"20px\",\n    letterSpacing: \"0.56px\",\n    fontWeight: \"600\"\n  }, \"Welcome to Protalk\")), __jsx(SpaceTag, {\n    marginTop: \"10\",\n    marginBottom: \"10\"\n  }, __jsx(Subtext, {\n    color: \"#fff\",\n    fontSize: \"14px\",\n    letterSpacing: \"0.56px\",\n    fontWeight: \"400\"\n  }, \"Budget Friendly Multi consultant application\"))), __jsx(ChatContent, null, __jsx(OrderTag, null, __jsx(\"div\", {\n    ref: bottomRef,\n    style: {\n      height: \"300px\",\n      overflow: \"auto\",\n      position: \"relative\",\n      display: \"block\"\n    }\n  }, messages.map((item, i) => __jsx(\"div\", {\n    key: i\n  }, item.text ? __jsx(ListTag, null, __jsx(FlexTag, null, __jsx(SpaceTag, {\n    marginTop: \"10\",\n    marginBottom: \"10\"\n  }, __jsx(ImageTag, {\n    src: Logo,\n    height: \"25\",\n    width: \"25\",\n    borderRadius: \"50%\"\n  })), __jsx(\"div\", null, __jsx(CardBlock, {\n    border: \"0.8px solid rgba(204, 206, 210, 0.5)\",\n    borderRadius: \" 6px\",\n    padding: \"10px\"\n  }, __jsx(Subtext, {\n    color: \"#000\",\n    fontSize: \"12px\",\n    fontWeight: \"400\",\n    lineHeight: \"15px\"\n  }, item.text)), item.button ? __jsx(\"div\", null, item.button.map((item, i) => __jsx(LoadMorebutton, {\n    fontSize: \"12px\",\n    padding: \"10px\",\n    border: \"0.4px solid #029532\",\n    background: `${buttonName[item.name] === item.name ? \"#029532\" : \"none\"}`,\n    color: `${buttonName[item.name] === item.name ? \"#fff\" : \"#029532\"}`,\n    onClick: e => nextQuestion(item.name, item._id, e),\n    style: {\n      margin: \"5px\"\n    },\n    name: item.name,\n    id: item._id\n  }, item.name))) : __jsx(React.Fragment, null)))) : \"\", item.text1 ? __jsx(ListTag, null, __jsx(FlexTag, {\n    justifyContent: \"flex-end\"\n  }, __jsx(CardBlock, {\n    border: \"0.8px solid rgba(204, 206, 210, 0.5)\",\n    borderRadius: \" 6px\",\n    padding: \"10px\"\n  }, __jsx(Subtext, {\n    color: \"#000\",\n    fontSize: \"12px\",\n    fontWeight: \"400\",\n    lineHeight: \"15px\"\n  }, item.text1)))) : __jsx(React.Fragment, null)))))), __jsx(ChatFooter, null, typeBox === false ? __jsx(React.Fragment, null) : __jsx(\"div\", null, __jsx(HorizontalLine, {\n    borderTop: \"1px solid #E3E3E3\"\n  }), __jsx(\"form\", {\n    onSubmit: onSubmitEvent\n  }, __jsx(FlexTag, null, __jsx(InputTag, {\n    value: values,\n    placeholder: \"Type your reply here\",\n    onChange: onChangeEvent // onKeyDown={handleKeyDown}\n\n  }), __jsx(LoadMorebutton, {\n    color: \"#fff\",\n    background: \"#029532\",\n    onClick: sendmsg,\n    border: \"none\"\n  }, __jsx(Icon, {\n    name: Icons.paperplan\n  }))))))) : __jsx(React.Fragment, null));\n}","map":null,"metadata":{},"sourceType":"module"}