{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { AutoSizer, WindowScroller, List } from \"react-virtualized\";\nimport ReactMultiSelectCheckboxes from \"react-multiselect-checkboxes\";\nimport { Container } from \"styled-container-component\";\nimport { Column, Row } from \"styled-grid-system-component\";\nimport { BreadCrumb } from \"./banner/breadcrumb\";\nimport { Question } from \"./question/question\";\nimport { BaseUrl } from \"../url\";\nimport { Chat } from \"./chat/chat\";\nimport { HorizontalLine, LoadMorebutton, SpaceTag, ImageTag, CenterTag } from \"../components/small-component\";\nimport { forumBanner } from \"./data\";\nimport * as Loader from \"../img/loader.gif\";\nexport function ForumLayout(_ref) {\n  var queryName = _ref.queryName;\n  var myRef = /*#__PURE__*/React.createRef();\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      query = _React$useState2[0],\n      setQuery = _React$useState2[1];\n\n  var _React$useState3 = React.useState({\n    width: undefined,\n    height: undefined\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      windowSize = _React$useState4[0],\n      setWindowSize = _React$useState4[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      selected1 = _React$useState6[0],\n      setSelected1 = _React$useState6[1];\n\n  var _React$useState7 = React.useState([]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      selected2 = _React$useState8[0],\n      setSelected2 = _React$useState8[1];\n\n  var _React$useState9 = React.useState([]),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      option1 = _React$useState10[0],\n      setOption1 = _React$useState10[1];\n\n  var _React$useState11 = React.useState([]),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      option2 = _React$useState12[0],\n      setOption2 = _React$useState12[1];\n\n  var _React$useState13 = React.useState(0),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      skip = _React$useState14[0],\n      setSkip = _React$useState14[1];\n\n  var _React$useState15 = React.useState(20),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      scrollY = _React$useState16[0],\n      setScrollY = _React$useState16[1];\n\n  React.useEffect(function () {\n    function handleResize() {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n    return function () {\n      return window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n  React.useEffect(function () {\n    getForumQuery(queryName);\n  }, []);\n  React.useEffect(function () {\n    setSelected2(_toConsumableArray(option2));\n    setSelected1(_toConsumableArray(option1));\n  }, []);\n\n  function getForumQuery(queryName) {\n    fetch(\"\".concat(BaseUrl, \"/apiV2/forumQueries\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        expertiseId: \"\",\n        limit: 500,\n        skip: skip\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (res) {\n      setQuery(query.concat(res.queries));\n      var arr1 = [];\n      var arr2 = []; // eslint-disable-next-line\n\n      res.queries.map(function (res) {\n        arr1 = arr1.concat({\n          label: res.expertise,\n          value: res.expertise\n        });\n        arr2 = arr2.concat({\n          label: res.subExpertise,\n          value: res.subExpertise\n        });\n      });\n      setOption1(uniquebyKeep(arr1));\n      setOption2(uniquebyKeep(arr2));\n    });\n  }\n\n  function test(value) {\n    var result = [];\n    var arr2 = [];\n    value.map(function (a1) {\n      var out = query.filter(function (item) {\n        return item.expertise === a1.value;\n      });\n      result.push.apply(result, _toConsumableArray(out));\n    });\n    result.map(function (res) {\n      arr2 = arr2.concat({\n        label: res.subExpertise,\n        value: res.subExpertise\n      });\n    });\n    setOption2(uniquebyKeep(arr2));\n    setSelected2(uniquebyKeep(arr2));\n  }\n\n  function searchData() {\n    setQuery([]);\n    var result = [];\n\n    if (selected2.length !== 0) {\n      selected2.map(function (a1) {\n        if (a1.value !== \"*\") {\n          var out = query.filter(function (item) {\n            return item.subExpertise === a1.value;\n          });\n          result.push.apply(result, _toConsumableArray(out));\n        } else {\n          var out = query.filter(function (item) {\n            return item.subExpertise !== a1.value;\n          });\n          result.push.apply(result, _toConsumableArray(out));\n        }\n      });\n    } else if (selected1.length !== 0) {\n      selected1.map(function (a1) {\n        if (a1.value !== \"*\") {\n          var out = query.filter(function (item) {\n            return item.expertise === a1.value;\n          });\n          result.push.apply(result, _toConsumableArray(out));\n        } else {\n          var out = query.filter(function (item) {\n            return item.expertise !== a1.value;\n          });\n          result.push.apply(result, _toConsumableArray(out));\n        }\n      });\n    } else {\n      result.concat(query);\n    }\n\n    setQuery(result);\n  }\n\n  function uniquebyKeep(data) {\n    var isDuplicate = data.filter(function (ele, ind) {\n      return ind === data.findIndex(function (elem) {\n        return elem.label === ele.label && elem.value === ele.value;\n      });\n    });\n    return isDuplicate;\n  }\n\n  function Rows(_ref2) {\n    var index = _ref2.index,\n        key = _ref2.key,\n        isScrolling = _ref2.isScrolling,\n        style = _ref2.style;\n\n    if (isScrolling) {\n      return __jsx(\"div\", {\n        style: style,\n        key: key\n      }, __jsx(Question, {\n        QuestionItems: query[index],\n        windowwidth: windowSize.width\n      }));\n    } else {\n      return __jsx(\"div\", {\n        style: style,\n        key: key\n      }, __jsx(Question, {\n        QuestionItems: query[index],\n        windowwidth: windowSize.width\n      }));\n    }\n  }\n\n  function getDropdownButtonLabelExpertise(_ref3) {\n    var placeholderButtonLabel = _ref3.placeholderButtonLabel,\n        value = _ref3.value;\n\n    if (value.length === 0) {\n      return \"\".concat(placeholderButtonLabel, \": select...\");\n    } else if (value.length === 1) {\n      return \"\".concat(placeholderButtonLabel, \": \\n\\t\\t\\t\").concat(value[0].value, \" \");\n    } else {\n      return \"\".concat(placeholderButtonLabel, \": \\n\\t\\t  \").concat(JSON.stringify(value.length), \" selected\");\n    }\n  }\n\n  function onChangeExpertise(value, event) {\n    test(value);\n\n    if (event.action === \"select-option\" && event.option.value === \"*\") {\n      this.setState(this.options);\n      test(this.options);\n    } else if (event.action === \"deselect-option\" && event.option.value === \"*\") {\n      this.setState([]);\n    } else if (event.action === \"deselect-option\") {\n      this.setState(value.filter(function (o) {\n        return o.value !== \"*\";\n      }));\n    } else if (value.length === this.options.length - 1) {\n      this.setState(this.options);\n    } else {\n      this.setState(value);\n    }\n  }\n\n  function getDropdownButtonLabelSubExpertise(_ref4) {\n    var placeholderButtonLabel = _ref4.placeholderButtonLabel,\n        value = _ref4.value;\n\n    if (value.length === 0) {\n      return \"\".concat(placeholderButtonLabel, \": select...\");\n    } else if (value.length === 1) {\n      return \"\".concat(placeholderButtonLabel, \": \\n\\t\\t\\t\").concat(value[0].value, \" \");\n    } else {\n      return \"\".concat(placeholderButtonLabel, \": \\n\\t\\t  \").concat(JSON.stringify(value.length), \" selected\");\n    }\n  }\n\n  function onChangeSubExpertise(value, event) {\n    console.log(value, \"value\");\n\n    if (event.action === \"select-option\" && event.option.value === \"*\") {\n      this.setState(this.options);\n    } else if (event.action === \"deselect-option\" && event.option.value === \"*\") {\n      this.setState([]);\n    } else if (event.action === \"deselect-option\") {\n      this.setState(value.filter(function (o) {\n        return o.value !== \"*\";\n      }));\n    } else if (value.length === this.options.length - 1) {\n      this.setState(this.options);\n    } else {\n      this.setState(value);\n    }\n  }\n\n  function handleScroll() {\n    var scrollY = window.scrollY; //Don't get confused by what's scrolling - It's not the window\n\n    var scrollTop = this.myRef.current.scrollTop;\n    console.log(\"onScroll, window.scrollY: \".concat(scrollY, \" myRef.scrollTop: \").concat(scrollTop));\n    setSkip(skip + 1);\n    getForumQuery(\"query\");\n  }\n\n  var height = windowSize.width > 770 ? \"120px \" : \"200px\";\n  var height1 = windowSize.width > 770 ? 175 : 215;\n  var width = 770; // function logit() {\n  // \tsetScrollY(scrollY + 1);\n  // \tgetForumQuery(queryName);\n  // }\n  // React.useEffect(() => {\n  // \tfunction watchScroll() {\n  // \t\twindow.addEventListener(\"scroll\", logit);\n  // \t}\n  // \twatchScroll();\n  // \treturn () => {\n  // \t\twindow.removeEventListener(\"scroll\", logit);\n  // \t};\n  // });\n\n  function onChildScroll() {\n    console.log(\"test\");\n  }\n\n  return __jsx(React.Fragment, null, __jsx(HorizontalLine, {\n    borderTop: \"1px solid #E0E0E0\"\n  }), __jsx(BreadCrumb, {\n    BanerItems: forumBanner\n  }), __jsx(\"br\", null), __jsx(Container, null, __jsx(Row, null, __jsx(Column, {\n    md: 12,\n    sm: 12,\n    xs: 12\n  }, __jsx(SpaceTag, {\n    marginTop: \"10\",\n    marginBottom: \"5\"\n  }, __jsx(\"div\", {\n    style: {\n      paddingTop: \"20px\",\n      paddingBottom: \"20px\",\n      borderRadius: \"10px\",\n      border: \"1px solid #D0D7DC\"\n    }\n  }, __jsx(Row, null, __jsx(Column, {\n    md: 4,\n    sm: 4,\n    xs: 12\n  }, __jsx(SpaceTag, {\n    marginTop: \"5\",\n    marginBottom: \"5\"\n  }, __jsx(ReactMultiSelectCheckboxes, {\n    options: _toConsumableArray(option1),\n    placeholderButtonLabel: \"Expertise\",\n    getDropdownButtonLabel: getDropdownButtonLabelExpertise,\n    value: selected1,\n    onChange: onChangeExpertise,\n    setState: setSelected1\n  }))), __jsx(Column, {\n    md: 5,\n    sm: 4,\n    xs: 12\n  }, __jsx(SpaceTag, {\n    marginTop: \"5\",\n    marginBottom: \"5\"\n  }, __jsx(ReactMultiSelectCheckboxes, {\n    options: _toConsumableArray(option2),\n    placeholderButtonLabel: \"SubExpertise\",\n    getDropdownButtonLabel: getDropdownButtonLabelSubExpertise,\n    value: selected2,\n    onChange: onChangeSubExpertise,\n    setState: setSelected2\n  }))), __jsx(Column, {\n    md: 2,\n    sm: 4,\n    xs: 4\n  }, __jsx(SpaceTag, {\n    marginTop: \"5\",\n    marginBottom: \"5\"\n  }, __jsx(LoadMorebutton, {\n    onClick: searchData,\n    fontSize: \"18px\",\n    padding: \"8px\",\n    background: \"#009846\",\n    color: \"#fff\",\n    width: height,\n    border: \"none\"\n  }, \"Search\")))))))), __jsx(\"br\", null)), query.length === 0 ? __jsx(CenterTag, null, windowSize.width > width ? __jsx(ImageTag, {\n    src: Loader\n  }) : __jsx(ImageTag, {\n    src: Loader,\n    width: \"100\",\n    height: \"100\"\n  }), __jsx(\"br\", null)) : __jsx(\"div\", null, __jsx(WindowScroller, null, function (_ref5) {\n    var height = _ref5.height,\n        isScrolling = _ref5.isScrolling,\n        registerChild = _ref5.registerChild,\n        scrollTop = _ref5.scrollTop;\n    return __jsx(AutoSizer, {\n      disableHeight: true\n    }, function (_ref6) {\n      var width = _ref6.width;\n      return __jsx(\"div\", {\n        ref: registerChild\n      }, __jsx(List, {\n        autoHeight: true,\n        height: height,\n        rowCount: query.length,\n        rowHeight: height1,\n        width: width,\n        rowRenderer: Rows,\n        onScroll: onChildScroll,\n        scrollTop: scrollTop,\n        isScrolling: isScrolling\n      }));\n    });\n  })), __jsx(\"br\", null), __jsx(Chat, null));\n}","map":null,"metadata":{},"sourceType":"module"}