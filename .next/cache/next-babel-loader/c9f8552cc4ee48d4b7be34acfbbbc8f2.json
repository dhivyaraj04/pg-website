{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useRef, useState } from \"react\";\nimport { ChatButton } from \"../../components/button/button\";\nimport { Subtext, CardBlock, SpaceTag, FlexTag, ImageTag, OrderTag, ListTag, LoadMorebutton, ChatContainer, ChatBot, ChatContent, ChatHeader } from \"../../components/small-component\";\nimport { Icon } from \"../../components/icon/icon\";\nimport { Icons } from \"../../components/icon/icons-props\";\nimport * as Logo from \"../../img/logo.png\";\nimport { BaseUrl } from \"../../url\";\n\nvar generateMessage = function generateMessage() {\n  var words = [\"The sky\", \"above\", \"the port\", \"was\", \"the color of television\", \"tuned\", \"to\", \"a dead channel\", \".\", \"All\", \"this happened\", \"more or less\", \".\", \"I\", \"had\", \"the story\", \"bit by bit\", \"from various people\", \"and\", \"as generally\", \"happens\", \"in such cases\", \"each time\", \"it\", \"was\", \"a different story\", \".\", \"It\", \"was\", \"a pleasure\", \"to\", \"burn\"];\n  var text = [];\n  var x = 7;\n\n  while (--x) {\n    text.push(words[Math.floor(Math.random() * words.length)]);\n  } // return text.join(\" \");\n\n\n  return words;\n};\n\nexport function Chat() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState({}),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      buttonName = _React$useState4[0],\n      setButtonName = _React$useState4[1];\n\n  function onClickEvent() {\n    setOpen(!open);\n  }\n\n  var chatData = [{\n    text: \"Hi there, what are you looking for today?\",\n    buttonData: [{\n      name: \"Take a Service\"\n    }, {\n      name: \"Ask a Quary\"\n    }, {\n      name: \"Looking for a Plan\"\n    }]\n  }, {\n    text: \"Select your area of expertise\",\n    buttonData: [{\n      name: \"Fitness\"\n    }, {\n      name: \"Lawyer\"\n    }, {\n      name: \"Ayurveda\"\n    }, {\n      name: \"Mental Wellness\"\n    }, {\n      name: \"Carrer Counselor\"\n    }]\n  }, {\n    text: \"Select your area of Sub expertise\",\n    buttonData: [{\n      name: \"Yoga\"\n    }, {\n      name: \"Nutrition\"\n    }, {\n      name: \"Weight Loss\"\n    }, {\n      name: \"General Exercise\"\n    }, {\n      name: \"Dietition\"\n    }]\n  }]; // const messagesEndRef = React.useRef(null);\n  // function scrollToBottom() {\n  // \tmessagesEndRef.current.scrollIntoView({\n  // \t\tbehavior: \"smooth\",\n  // \t\tblock: \"end\",\n  // \t\tinline: \"nearest\"\n  // \t});\n  // }\n\n  function nextQuestion(name, e) {\n    setButtonName(_objectSpread(_objectSpread({}, buttonName), {}, _defineProperty({}, name, e.target.name)));\n  }\n\n  var messageEl = useRef(null);\n\n  var _useState = useState([]),\n      messages = _useState[0],\n      setMessages = _useState[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      expertise = _React$useState6[0],\n      setExpertise = _React$useState6[1];\n\n  function getExpertis(_x) {\n    return _getExpertis.apply(this, arguments);\n  }\n\n  function _getExpertis() {\n    _getExpertis = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(expertises) {\n      var res, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"\".concat(BaseUrl, \"/apiV2/\").concat(expertises), {\n                method: \"GET\"\n              });\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.json();\n\n            case 5:\n              data = _context.sent;\n              setExpertise(data.expertises);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getExpertis.apply(this, arguments);\n  }\n\n  console.log(expertise); // useEffect(() => {\n  // \tif (messageEl) {\n  // \t\tmessageEl.current.addEventListener(\"DOMNodeInserted\", event => {\n  // \t\t\tconst { currentTarget: target } = event;\n  // \t\t\ttarget.scroll({ top: target.scrollHeight, behavior: \"smooth\" });\n  // \t\t});\n  // \t}\n  // }, []);\n  // useEffect(() => {\n  // \tconst generateDummyMessage = () => {\n  // \t\tsetInterval(() => {\n  // \t\t\tsetMessages(prevMsg => [...prevMsg, generateMessage()]);\n  // \t\t}, 2000);\n  // \t};\n  // \tgenerateDummyMessage();\n  // }, []);\n  // console.log(messages);\n\n  return __jsx(React.Fragment, null, __jsx(ChatContainer, null, __jsx(ChatButton, {\n    onClickEvent: onClickEvent\n  }, __jsx(Icon, {\n    name: Icons.chat\n  }))), open === true ? __jsx(ChatBot, null, __jsx(ChatHeader, null, __jsx(SpaceTag, {\n    marginTop: \"10\",\n    marginBottom: \"10\"\n  }, __jsx(Subtext, {\n    color: \"#fff\",\n    fontSize: \"20px\",\n    letterSpacing: \"0.56px\",\n    fontWeight: \"600\"\n  }, \"Welcome to Protalk\")), __jsx(SpaceTag, {\n    marginTop: \"10\",\n    marginBottom: \"10\"\n  }, __jsx(Subtext, {\n    color: \"#fff\",\n    fontSize: \"14px\",\n    letterSpacing: \"0.56px\",\n    fontWeight: \"400\"\n  }, \"Budget Friendly Multi consultant application\"))), __jsx(ChatContent, null, __jsx(OrderTag, null, chatData.map(function (item, i) {\n    return __jsx(React.Fragment, null, __jsx(ListTag, null, __jsx(FlexTag, null, __jsx(SpaceTag, {\n      marginTop: \"10\",\n      marginBottom: \"10\"\n    }, __jsx(ImageTag, {\n      src: Logo,\n      height: \"25\",\n      width: \"25\",\n      borderRadius: \"50%\"\n    })), __jsx(\"div\", null, __jsx(CardBlock, {\n      border: \"0.8px solid rgba(204, 206, 210, 0.5)\",\n      borderRadius: \" 6px\",\n      padding: \"10px\"\n    }, __jsx(Subtext, {\n      color: \"#000\",\n      fontSize: \"12px\",\n      fontWeight: \"400\",\n      lineHeight: \"15px\"\n    }, item.text)), __jsx(\"div\", null, item.buttonData.map(function (item, i) {\n      return __jsx(LoadMorebutton, {\n        fontSize: \"12px\",\n        padding: \"10px\",\n        border: \"0.4px solid #029532\",\n        background: \"\".concat(buttonName[item.name] === item.name ? \"#029532\" : \"none\"),\n        color: \"\".concat(buttonName[item.name] === item.name ? \"#fff\" : \"#029532\"),\n        onClick: function onClick(e) {\n          return nextQuestion(item.name, e);\n        },\n        style: {\n          margin: \"10px\"\n        },\n        name: item.name\n      }, item.name);\n    }))))));\n  })))) : __jsx(React.Fragment, null));\n}","map":null,"metadata":{},"sourceType":"module"}