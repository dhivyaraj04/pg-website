{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { AutoSizer, WindowScroller, List } from \"react-virtualized\";\nimport ReactMultiSelectCheckboxes from \"react-multiselect-checkboxes\";\nimport { Container } from \"styled-container-component\";\nimport { Column, Row } from \"styled-grid-system-component\";\nimport { BreadCrumb } from \"./banner/breadcrumb\";\nimport { Question } from \"./question/question\";\nimport { BaseUrl } from \"../url\";\nimport { Chat } from \"./chat/chat\";\nimport { HorizontalLine, LoadMorebutton, SpaceTag, ImageTag, CenterTag } from \"../components/small-component\";\nimport { forumBanner } from \"./data\";\nimport * as Loader from \"../img/loader.gif\";\nexport function ForumLayout({\n  queryName\n}) {\n  const [query, setQuery] = React.useState([]);\n  const [windowSize, setWindowSize] = React.useState({\n    width: undefined,\n    height: undefined\n  });\n  const [selected1, setSelected1] = React.useState([]);\n  const [selected2, setSelected2] = React.useState([]);\n  const [option1, setOption1] = React.useState([]);\n  const [option2, setOption2] = React.useState([]);\n  const [skip, setSkip] = React.useState(0);\n  const [scrollY, setScrollY] = React.useState(20);\n  React.useEffect(() => {\n    function handleResize() {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  React.useEffect(() => {\n    getForumQuery(queryName);\n  }, []);\n  React.useEffect(() => {\n    setSelected2([...option2]);\n    setSelected1([...option1]);\n  }, []);\n\n  function getForumQuery(queryName) {\n    fetch(`${BaseUrl}/apiV2/forumQueries`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        expertiseId: \"\",\n        limit: 20,\n        skip: skip\n      })\n    }).then(response => {\n      return response.json();\n    }).then(res => {\n      setQuery(query.concat(res.queries));\n      let arr1 = [];\n      let arr2 = []; // eslint-disable-next-line\n\n      res.queries.map(res => {\n        arr1 = arr1.concat({\n          label: res.expertise,\n          value: res.expertise\n        });\n        arr2 = arr2.concat({\n          label: res.subExpertise,\n          value: res.subExpertise\n        });\n      });\n      setOption1(uniquebyKeep(arr1));\n      setOption2(uniquebyKeep(arr2));\n    });\n  }\n\n  function test(value) {\n    let result = [];\n    let arr2 = [];\n    value.map(a1 => {\n      var out = query.filter(item => item.expertise === a1.value);\n      result.push(...out);\n    });\n    result.map(res => {\n      arr2 = arr2.concat({\n        label: res.subExpertise,\n        value: res.subExpertise\n      });\n    });\n    setOption2(uniquebyKeep(arr2));\n    setSelected2(uniquebyKeep(arr2));\n  }\n\n  function searchData() {\n    setQuery([]);\n    let result = [];\n\n    if (selected2.length !== 0) {\n      selected2.map(a1 => {\n        if (a1.value !== \"*\") {\n          var out = query.filter(item => item.subExpertise === a1.value);\n          result.push(...out);\n        } else {\n          var out = query.filter(item => item.subExpertise !== a1.value);\n          result.push(...out);\n        }\n      });\n    } else if (selected1.length !== 0) {\n      selected1.map(a1 => {\n        if (a1.value !== \"*\") {\n          var out = query.filter(item => item.expertise === a1.value);\n          result.push(...out);\n        } else {\n          var out = query.filter(item => item.expertise !== a1.value);\n          result.push(...out);\n        }\n      });\n    } else {\n      result.concat(query);\n    }\n\n    setQuery(result);\n  }\n\n  function uniquebyKeep(data) {\n    var isDuplicate = data.filter((ele, ind) => ind === data.findIndex(elem => elem.label === ele.label && elem.value === ele.value));\n    return isDuplicate;\n  }\n\n  function Rows({\n    index,\n    key,\n    isScrolling,\n    style\n  }) {\n    if (isScrolling) {\n      return __jsx(\"div\", {\n        style: style,\n        key: key\n      }, __jsx(Question, {\n        QuestionItems: query[index],\n        windowwidth: windowSize.width\n      }));\n    } else {\n      return __jsx(\"div\", {\n        style: style,\n        key: key\n      }, __jsx(Question, {\n        QuestionItems: query[index],\n        windowwidth: windowSize.width\n      }));\n    }\n  }\n\n  function getDropdownButtonLabelExpertise({\n    placeholderButtonLabel,\n    value\n  }) {\n    if (value.length === 0) {\n      return `${placeholderButtonLabel}: select...`;\n    } else if (value.length === 1) {\n      return `${placeholderButtonLabel}: \n\t\t\t${value[0].value} `;\n    } else {\n      return `${placeholderButtonLabel}: \n\t\t  ${JSON.stringify(value.length)} selected`;\n    }\n  }\n\n  function onChangeExpertise(value, event) {\n    test(value);\n\n    if (event.action === \"select-option\" && event.option.value === \"*\") {\n      this.setState(this.options);\n      test(this.options);\n    } else if (event.action === \"deselect-option\" && event.option.value === \"*\") {\n      this.setState([]);\n    } else if (event.action === \"deselect-option\") {\n      this.setState(value.filter(o => o.value !== \"*\"));\n    } else if (value.length === this.options.length - 1) {\n      this.setState(this.options);\n    } else {\n      this.setState(value);\n    }\n  }\n\n  function getDropdownButtonLabelSubExpertise({\n    placeholderButtonLabel,\n    value\n  }) {\n    if (value.length === 0) {\n      return `${placeholderButtonLabel}: select...`;\n    } else if (value.length === 1) {\n      return `${placeholderButtonLabel}: \n\t\t\t${value[0].value} `;\n    } else {\n      return `${placeholderButtonLabel}: \n\t\t  ${JSON.stringify(value.length)} selected`;\n    }\n  }\n\n  function onChangeSubExpertise(value, event) {\n    if (event.action === \"select-option\" && event.option.value === \"*\") {\n      this.setState(this.options);\n    } else if (event.action === \"deselect-option\" && event.option.value === \"*\") {\n      this.setState([]);\n    } else if (event.action === \"deselect-option\") {\n      this.setState(value.filter(o => o.value !== \"*\"));\n    } else if (value.length === this.options.length - 1) {\n      this.setState(this.options);\n    } else {\n      this.setState(value);\n    }\n  }\n\n  const height = windowSize.width > 770 ? \"120px \" : \"200px\";\n  const height1 = windowSize.width > 770 ? 175 : 215;\n  const width = 770;\n\n  function onChildScroll() {\n    console.log(\"test\");\n    setSkip(skip + 1);\n    getForumQuery(\"query\");\n  }\n\n  return __jsx(React.Fragment, null, __jsx(HorizontalLine, {\n    borderTop: \"1px solid #E0E0E0\"\n  }), __jsx(BreadCrumb, {\n    BanerItems: forumBanner\n  }), __jsx(\"br\", null), __jsx(Container, null, __jsx(Row, null, __jsx(Column, {\n    md: 12,\n    sm: 12,\n    xs: 12\n  }, __jsx(SpaceTag, {\n    marginTop: \"10\",\n    marginBottom: \"5\"\n  }, __jsx(\"div\", {\n    style: {\n      paddingTop: \"20px\",\n      paddingBottom: \"20px\",\n      borderRadius: \"10px\",\n      border: \"1px solid #D0D7DC\"\n    }\n  }, __jsx(Row, null, __jsx(Column, {\n    md: 4,\n    sm: 4,\n    xs: 12\n  }, __jsx(SpaceTag, {\n    marginTop: \"5\",\n    marginBottom: \"5\"\n  }, __jsx(ReactMultiSelectCheckboxes, {\n    options: [...option1],\n    placeholderButtonLabel: \"Expertise\",\n    getDropdownButtonLabel: getDropdownButtonLabelExpertise,\n    value: selected1,\n    onChange: onChangeExpertise,\n    setState: setSelected1\n  }))), __jsx(Column, {\n    md: 5,\n    sm: 4,\n    xs: 12\n  }, __jsx(SpaceTag, {\n    marginTop: \"5\",\n    marginBottom: \"5\"\n  }, __jsx(ReactMultiSelectCheckboxes, {\n    options: [...option2],\n    placeholderButtonLabel: \"SubExpertise\",\n    getDropdownButtonLabel: getDropdownButtonLabelSubExpertise,\n    value: selected2,\n    onChange: onChangeSubExpertise,\n    setState: setSelected2\n  }))), __jsx(Column, {\n    md: 2,\n    sm: 4,\n    xs: 4\n  }, __jsx(SpaceTag, {\n    marginTop: \"5\",\n    marginBottom: \"5\"\n  }, __jsx(LoadMorebutton, {\n    onClick: searchData,\n    fontSize: \"18px\",\n    padding: \"8px\",\n    background: \"#009846\",\n    color: \"#fff\",\n    width: height,\n    border: \"none\"\n  }, \"Search\")))))))), __jsx(\"br\", null)), query.length === 0 ? __jsx(CenterTag, null, windowSize.width > width ? __jsx(ImageTag, {\n    src: Loader\n  }) : __jsx(ImageTag, {\n    src: Loader,\n    width: \"100\",\n    height: \"100\"\n  }), __jsx(\"br\", null)) : __jsx(WindowScroller, {\n    onScroll: onChildScroll\n  }, ({\n    height,\n    isScrolling,\n    scrollTop\n  }) => __jsx(AutoSizer, {\n    disableHeight: true\n  }, ({\n    width\n  }) => __jsx(List, {\n    autoHeight: true,\n    height: height,\n    rowCount: query.length,\n    rowHeight: height1,\n    width: width,\n    rowRenderer: Rows,\n    isScrolling: isScrolling,\n    scrollTop: scrollTop\n  }))), __jsx(\"br\", null), __jsx(Chat, null));\n}","map":null,"metadata":{},"sourceType":"module"}