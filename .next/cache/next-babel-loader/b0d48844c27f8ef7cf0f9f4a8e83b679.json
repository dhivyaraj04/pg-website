{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Modal from \"react-modal\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport { FixedSizeList as List } from \"react-window\";\nimport ReactMultiSelectCheckboxes from \"react-multiselect-checkboxes\";\nimport { Container } from \"styled-container-component\";\nimport { Column, Row } from \"styled-grid-system-component\";\nimport { Banner } from \"./banner/banner\";\nimport { Question } from \"./question/question\";\nimport { QuestionAnswer } from \"./question/question-answer\";\nimport { homeBanner } from \"./data\";\nimport { BaseUrl } from \"../url\";\nimport { Chat } from \"./chat/chat\";\nimport { FlexTag, LoadMorebutton, Subtext, SpaceTag } from \"../components/small-component\";\nexport function ForumLayout({\n  queryName\n}) {\n  const [query, setQuery] = React.useState([]);\n  const [skip, setSkip] = React.useState(0);\n  const myRef = React.useRef(null);\n  const [scrollTop, setScrollTop] = React.useState(0);\n  const [modalIsOpen, setIsOpen] = React.useState(false);\n  const [array, setArray] = React.useState([]);\n  const [windowSize, setWindowSize] = React.useState({\n    width: undefined,\n    height: undefined\n  });\n  const [selected1, setSelected1] = React.useState([]);\n  const [selected2, setSelected2] = React.useState([]);\n  const [option1, setOption1] = React.useState([]);\n  const [option2, setOption2] = React.useState([]);\n  React.useEffect(() => {\n    function handleResize() {\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    handleResize();\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  React.useEffect(() => {\n    getForumQuery(queryName);\n  }, []);\n\n  function getForumQuery(queryName) {\n    fetch(`${BaseUrl}/apiV2/forumQueries`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        expertiseId: \"\",\n        limit: 500,\n        skip: skip\n      })\n    }).then(response => {\n      return response.json();\n    }).then(res => {\n      console.log(res.queries);\n      const t = query.concat(res.queries);\n      setQuery(t);\n      let arr1 = [];\n      let arr2 = []; // eslint-disable-next-line\n\n      res.queries.map(res => {\n        arr1 = arr1.concat({\n          label: res.expertise,\n          value: res.expertise\n        });\n        arr2 = arr2.concat({\n          label: res.subExpertise,\n          value: res.subExpertise\n        });\n      });\n      setOption1(uniquebyKeep(arr1));\n      setOption2(uniquebyKeep(arr2));\n    });\n  }\n\n  function test(value) {\n    let result = [];\n    let arr2 = [];\n    value.map(a1 => {\n      var out = query.filter(item => item.expertise === a1.value);\n      result.push(...out);\n    });\n    result.map(res => {\n      arr2 = arr2.concat({\n        label: res.subExpertise,\n        value: res.subExpertise\n      });\n    });\n    setSelected2(uniquebyKeep(arr2));\n    setOption2(uniquebyKeep(arr2)); // setOption2(uniquebyKeep(arr2));\n  }\n\n  function searchData() {\n    let result = [];\n    let result2 = [];\n    let ar = [];\n\n    if (selected2.length !== 0) {\n      selected2.map(a1 => {\n        var out = query.filter(item => item.subExpertise === a1.value);\n        result.push(...out);\n      });\n    } else {\n      selected1.map(a1 => {\n        var out = query.filter(item => item.expertise === a1.value);\n        result.push(...out);\n      });\n    }\n\n    console.log(result, \"result\");\n    const te = result.concat(result2);\n    var isDuplicate = te.filter((ele, ind) => ind === te.findIndex(elem => elem._id === ele._id));\n  }\n\n  function uniquebyKeep(data) {\n    var isDuplicate = data.filter((ele, ind) => ind === data.findIndex(elem => elem.label === ele.label && elem.value === ele.value));\n    return isDuplicate;\n  }\n\n  function onScroll() {\n    setSkip(skip + 1);\n    const scrollY = window.scrollY;\n    const scrollTops = myRef.current.scrollTop;\n    setScrollTop(scrollTops);\n    getForumQuery(queryName);\n  }\n\n  function openModal(test) {\n    let bigCities = query.filter(city => city._id === test);\n    setArray(bigCities);\n    setIsOpen(true);\n  }\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  const Rows = ({\n    index,\n    style\n  }) => __jsx(\"div\", {\n    style: style\n  }, __jsx(Question, {\n    QuestionItems: query[index],\n    windowwidth: windowSize.width,\n    onClickEvent: openModal\n  }));\n\n  const customStyles = {\n    overlay: {\n      backgroundColor: \"#2125293b\"\n    },\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      bottom: \"auto\",\n      marginRight: \"-50%\",\n      transform: \"translate(-50%, -50%)\",\n      width: \"80%\",\n      overflow: \"initial\",\n      height: array.length !== 0 ? array[0].answers ? array[0].answers.length > 1 ? \"400px\" : \"375px\" : \"375px\" : \"375px\"\n    }\n  };\n  const [selectedOptions, setSelectedOptions] = React.useState([]);\n  React.useEffect(() => {\n    setSelected2([{\n      label: \"All\",\n      value: \"*\"\n    }, ...option2]);\n    setSelected1([{\n      label: \"All\",\n      value: \"*\"\n    }, ...option1]);\n  }, []);\n\n  function getDropdownButtonLabelExpertise({\n    placeholderButtonLabel,\n    value\n  }) {\n    console.log(value, \"value\");\n\n    if (value && value.some(o => o.value === \"*\")) {\n      return `${placeholderButtonLabel}: All`;\n    } else {\n      return `${placeholderButtonLabel}: \n\t\t  ${JSON.stringify(value.label)} selected`;\n    }\n  }\n\n  function onChangeExpertise(value, event) {\n    setOption2([]);\n    setSelected2([]);\n    console.log(value);\n    test(value);\n\n    if (event.action === \"select-option\" && event.option.value === \"*\") {\n      this.setState(this.options);\n    } else if (event.action === \"deselect-option\" && event.option.value === \"*\") {\n      this.setState([]);\n    } else if (event.action === \"deselect-option\") {\n      this.setState(value.filter(o => o.value !== \"*\"));\n    } else if (value.length === this.options.length - 1) {\n      this.setState(this.options);\n    } else {\n      this.setState(value);\n    }\n  }\n\n  function getDropdownButtonLabelSubExpertise({\n    placeholderButtonLabel,\n    value\n  }) {\n    if (value && value.some(o => o.value === \"*\")) {\n      return `${placeholderButtonLabel}: All`;\n    } else {\n      return `${placeholderButtonLabel}: \n\t\t  ${JSON.stringify(value.label)} selected`;\n    }\n  }\n\n  function onChangeSubExpertise(value, event) {\n    if (event.action === \"select-option\" && event.option.value === \"*\") {\n      this.setState(this.options);\n    } else if (event.action === \"deselect-option\" && event.option.value === \"*\") {\n      this.setState([]);\n    } else if (event.action === \"deselect-option\") {\n      this.setState(value.filter(o => o.value !== \"*\"));\n    } else if (value.length === this.options.length - 1) {\n      this.setState(this.options);\n    } else {\n      this.setState(value);\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Banner, {\n    BanerItems: homeBanner\n  }), __jsx(Container, null, __jsx(\"div\", {\n    style: {\n      border: \"1px solid #D0D7DC\"\n    }\n  }, __jsx(SpaceTag, {\n    marginTop: \"20\",\n    marginBottom: \"20\"\n  }, __jsx(Row, null, __jsx(Column, {\n    md: 4,\n    sm: 4,\n    xs: 12\n  }, __jsx(\"div\", null, __jsx(ReactMultiSelectCheckboxes, {\n    options: [{\n      label1: \"All\",\n      value: \"*\"\n    }, ...option1],\n    placeholderButtonLabel: \"Expertise\",\n    getDropdownButtonLabel: getDropdownButtonLabelExpertise,\n    value: selected1,\n    onChange: onChangeExpertise,\n    setState: setSelected1\n  }))), __jsx(Column, {\n    md: 4,\n    sm: 4,\n    xs: 12\n  }, __jsx(\"div\", null, __jsx(ReactMultiSelectCheckboxes, {\n    options: [{\n      label2: \"All\",\n      value: \"*\"\n    }, ...option2],\n    placeholderButtonLabel: \"SubExpertise\",\n    getDropdownButtonLabel: getDropdownButtonLabelSubExpertise,\n    value: selected2,\n    onChange: onChangeSubExpertise,\n    setState: setSelected2\n  }))), __jsx(Column, {\n    md: 4,\n    sm: 4,\n    xs: 4\n  }, __jsx(LoadMorebutton, {\n    onClick: searchData,\n    fontSize: \"18px\",\n    padding: \"8px\",\n    background: \"#009846\",\n    color: \"#fff\",\n    width: \"125px\",\n    border: \"none\"\n  }, \"Ask a Query\"))))), __jsx(\"br\", null)), __jsx(Container, null, __jsx(Row, null, __jsx(Column, {\n    md: 12,\n    sm: 12,\n    xs: 12\n  }, __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      scrollBehavior: \"smooth\"\n    }\n  }, __jsx(AutoSizer, null, ({\n    height,\n    width\n  }) => __jsx(List, {\n    height: height,\n    itemCount: query.length,\n    itemSize: 200,\n    width: width,\n    useIsScrolling: true\n  }, query ? Rows : \"loadding\")))))), __jsx(Chat, null), __jsx(Modal, {\n    isOpen: modalIsOpen,\n    onRequestClose: closeModal,\n    style: customStyles,\n    contentLabel: \"Example Modal\"\n  }, __jsx(SpaceTag, null, __jsx(FlexTag, {\n    justifyContent: \"space-between\"\n  }, __jsx(SpaceTag, {\n    marginLeft: \"30\"\n  }, __jsx(Subtext, {\n    fontSize: \"28px\",\n    lineHeight: \"42px\",\n    color: \"#000\"\n  }, \"Query\")), __jsx(LoadMorebutton, {\n    onClick: closeModal,\n    fontSize: \"18px\",\n    padding: \"5px\",\n    background: \"none\",\n    color: \"#000\",\n    width: \"125px\",\n    border: \"none\"\n  }, \"X\")), __jsx(\"div\", {\n    style: {\n      height: \"300px\",\n      overflow: \"auto\"\n    }\n  }, array.map((list, i) => __jsx(QuestionAnswer, {\n    QuestionItems: list\n  }))), __jsx(FlexTag, {\n    justifyContent: \"flex-end\"\n  }, __jsx(LoadMorebutton, {\n    onClick: closeModal,\n    fontSize: \"18px\",\n    padding: \"5px\",\n    background: \"#009846\",\n    color: \"#fff\",\n    width: \"125px\",\n    border: \"none\"\n  }, \"Close\")))));\n}","map":null,"metadata":{},"sourceType":"module"}